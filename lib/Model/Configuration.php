<?php
/**
 * Configuration
 *
 * PHP version 5
 *
 * @category Class
 * @package  pachirapay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace pachirapay\Model;

use \ArrayAccess;
use \pachirapay\ObjectSerializer;

/**
 * Configuration Class Doc Comment
 *
 * @category Class
 * @package  pachirapay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Configuration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Configuration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'culture' => 'string',
        'form_type' => 'string',
        'merchant_back_url' => 'string',
        'merchant_home_url' => 'string',
        'merchant_notify_url' => 'string',
        'merchant_return_url' => 'string',
        'payment_option_ref' => 'string',
        'report_delay_in_days' => 'int',
        'user_agent' => 'string',
        'template' => 'string',
        'authentication_only' => 'bool',
        'validation_mode' => '\pachirapay\Model\ValidationModeOverride'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'culture' => null,
        'form_type' => null,
        'merchant_back_url' => null,
        'merchant_home_url' => null,
        'merchant_notify_url' => null,
        'merchant_return_url' => null,
        'payment_option_ref' => null,
        'report_delay_in_days' => 'int32',
        'user_agent' => null,
        'template' => null,
        'authentication_only' => null,
        'validation_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'culture' => 'culture',
        'form_type' => 'formType',
        'merchant_back_url' => 'merchantBackUrl',
        'merchant_home_url' => 'merchantHomeUrl',
        'merchant_notify_url' => 'merchantNotifyUrl',
        'merchant_return_url' => 'merchantReturnUrl',
        'payment_option_ref' => 'paymentOptionRef',
        'report_delay_in_days' => 'reportDelayInDays',
        'user_agent' => 'userAgent',
        'template' => 'template',
        'authentication_only' => 'authenticationOnly',
        'validation_mode' => 'validationMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'culture' => 'setCulture',
        'form_type' => 'setFormType',
        'merchant_back_url' => 'setMerchantBackUrl',
        'merchant_home_url' => 'setMerchantHomeUrl',
        'merchant_notify_url' => 'setMerchantNotifyUrl',
        'merchant_return_url' => 'setMerchantReturnUrl',
        'payment_option_ref' => 'setPaymentOptionRef',
        'report_delay_in_days' => 'setReportDelayInDays',
        'user_agent' => 'setUserAgent',
        'template' => 'setTemplate',
        'authentication_only' => 'setAuthenticationOnly',
        'validation_mode' => 'setValidationMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'culture' => 'getCulture',
        'form_type' => 'getFormType',
        'merchant_back_url' => 'getMerchantBackUrl',
        'merchant_home_url' => 'getMerchantHomeUrl',
        'merchant_notify_url' => 'getMerchantNotifyUrl',
        'merchant_return_url' => 'getMerchantReturnUrl',
        'payment_option_ref' => 'getPaymentOptionRef',
        'report_delay_in_days' => 'getReportDelayInDays',
        'user_agent' => 'getUserAgent',
        'template' => 'getTemplate',
        'authentication_only' => 'getAuthenticationOnly',
        'validation_mode' => 'getValidationMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FORM_TYPE__DEFAULT = 'default';
    const FORM_TYPE_IFRAME = 'iframe';
    const FORM_TYPE_PREVIEW = 'preview';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormTypeAllowableValues()
    {
        return [
            self::FORM_TYPE__DEFAULT,
            self::FORM_TYPE_IFRAME,
            self::FORM_TYPE_PREVIEW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['form_type'] = isset($data['form_type']) ? $data['form_type'] : null;
        $this->container['merchant_back_url'] = isset($data['merchant_back_url']) ? $data['merchant_back_url'] : null;
        $this->container['merchant_home_url'] = isset($data['merchant_home_url']) ? $data['merchant_home_url'] : null;
        $this->container['merchant_notify_url'] = isset($data['merchant_notify_url']) ? $data['merchant_notify_url'] : null;
        $this->container['merchant_return_url'] = isset($data['merchant_return_url']) ? $data['merchant_return_url'] : null;
        $this->container['payment_option_ref'] = isset($data['payment_option_ref']) ? $data['payment_option_ref'] : null;
        $this->container['report_delay_in_days'] = isset($data['report_delay_in_days']) ? $data['report_delay_in_days'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['authentication_only'] = isset($data['authentication_only']) ? $data['authentication_only'] : null;
        $this->container['validation_mode'] = isset($data['validation_mode']) ? $data['validation_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormTypeAllowableValues();
        if (!is_null($this->container['form_type']) && !in_array($this->container['form_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'form_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_option_ref'] === null) {
            $invalidProperties[] = "'payment_option_ref' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets culture
     *
     * @return string|null
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string|null $culture culture
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets form_type
     *
     * @return string|null
     */
    public function getFormType()
    {
        return $this->container['form_type'];
    }

    /**
     * Sets form_type
     *
     * @param string|null $form_type form_type
     *
     * @return $this
     */
    public function setFormType($form_type)
    {
        $allowedValues = $this->getFormTypeAllowableValues();
        if (!is_null($form_type) && !in_array($form_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'form_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['form_type'] = $form_type;

        return $this;
    }

    /**
     * Gets merchant_back_url
     *
     * @return string|null
     */
    public function getMerchantBackUrl()
    {
        return $this->container['merchant_back_url'];
    }

    /**
     * Sets merchant_back_url
     *
     * @param string|null $merchant_back_url merchant_back_url
     *
     * @return $this
     */
    public function setMerchantBackUrl($merchant_back_url)
    {
        $this->container['merchant_back_url'] = $merchant_back_url;

        return $this;
    }

    /**
     * Gets merchant_home_url
     *
     * @return string|null
     */
    public function getMerchantHomeUrl()
    {
        return $this->container['merchant_home_url'];
    }

    /**
     * Sets merchant_home_url
     *
     * @param string|null $merchant_home_url merchant_home_url
     *
     * @return $this
     */
    public function setMerchantHomeUrl($merchant_home_url)
    {
        $this->container['merchant_home_url'] = $merchant_home_url;

        return $this;
    }

    /**
     * Gets merchant_notify_url
     *
     * @return string|null
     */
    public function getMerchantNotifyUrl()
    {
        return $this->container['merchant_notify_url'];
    }

    /**
     * Sets merchant_notify_url
     *
     * @param string|null $merchant_notify_url merchant_notify_url
     *
     * @return $this
     */
    public function setMerchantNotifyUrl($merchant_notify_url)
    {
        $this->container['merchant_notify_url'] = $merchant_notify_url;

        return $this;
    }

    /**
     * Gets merchant_return_url
     *
     * @return string|null
     */
    public function getMerchantReturnUrl()
    {
        return $this->container['merchant_return_url'];
    }

    /**
     * Sets merchant_return_url
     *
     * @param string|null $merchant_return_url merchant_return_url
     *
     * @return $this
     */
    public function setMerchantReturnUrl($merchant_return_url)
    {
        $this->container['merchant_return_url'] = $merchant_return_url;

        return $this;
    }

    /**
     * Gets payment_option_ref
     *
     * @return string
     */
    public function getPaymentOptionRef()
    {
        return $this->container['payment_option_ref'];
    }

    /**
     * Sets payment_option_ref
     *
     * @param string $payment_option_ref payment_option_ref
     *
     * @return $this
     */
    public function setPaymentOptionRef($payment_option_ref)
    {
        $this->container['payment_option_ref'] = $payment_option_ref;

        return $this;
    }

    /**
     * Gets report_delay_in_days
     *
     * @return int|null
     */
    public function getReportDelayInDays()
    {
        return $this->container['report_delay_in_days'];
    }

    /**
     * Sets report_delay_in_days
     *
     * @param int|null $report_delay_in_days report_delay_in_days
     *
     * @return $this
     */
    public function setReportDelayInDays($report_delay_in_days)
    {
        $this->container['report_delay_in_days'] = $report_delay_in_days;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent user_agent
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets authentication_only
     *
     * @return bool|null
     */
    public function getAuthenticationOnly()
    {
        return $this->container['authentication_only'];
    }

    /**
     * Sets authentication_only
     *
     * @param bool|null $authentication_only authentication_only
     *
     * @return $this
     */
    public function setAuthenticationOnly($authentication_only)
    {
        $this->container['authentication_only'] = $authentication_only;

        return $this;
    }

    /**
     * Gets validation_mode
     *
     * @return \pachirapay\Model\ValidationModeOverride|null
     */
    public function getValidationMode()
    {
        return $this->container['validation_mode'];
    }

    /**
     * Sets validation_mode
     *
     * @param \pachirapay\Model\ValidationModeOverride|null $validation_mode validation_mode
     *
     * @return $this
     */
    public function setValidationMode($validation_mode)
    {
        $this->container['validation_mode'] = $validation_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


