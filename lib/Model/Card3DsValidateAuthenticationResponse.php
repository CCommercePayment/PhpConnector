<?php
/**
 * Card3DsValidateAuthenticationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CpaymentConnector\Model;

use \ArrayAccess;
use \CpaymentConnector\ObjectSerializer;

/**
 * Card3DsValidateAuthenticationResponse Class Doc Comment
 *
 * @category Class
 * @description The card payment response
 * @package  CpaymentConnector
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Card3DsValidateAuthenticationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Card3DsValidateAuthenticationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authentication_status' => 'string',
        'liability_shift_status' => 'string',
        'authentication_data' => 'map[string,string]',
        'response_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'authentication_status' => null,
        'liability_shift_status' => null,
        'authentication_data' => null,
        'response_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication_status' => 'authenticationStatus',
        'liability_shift_status' => 'liabilityShiftStatus',
        'authentication_data' => 'authenticationData',
        'response_message' => 'responseMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication_status' => 'setAuthenticationStatus',
        'liability_shift_status' => 'setLiabilityShiftStatus',
        'authentication_data' => 'setAuthenticationData',
        'response_message' => 'setResponseMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication_status' => 'getAuthenticationStatus',
        'liability_shift_status' => 'getLiabilityShiftStatus',
        'authentication_data' => 'getAuthenticationData',
        'response_message' => 'getResponseMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUTHENTICATION_STATUS_UNDEFINED = 'undefined';
    const AUTHENTICATION_STATUS_AUTHENTICATED = 'authenticated';
    const AUTHENTICATION_STATUS_NOT_AUTHENTICATED = 'notAuthenticated';
    const LIABILITY_SHIFT_STATUS_UNDEFINED = 'undefined';
    const LIABILITY_SHIFT_STATUS_SHIFT = 'shift';
    const LIABILITY_SHIFT_STATUS_NO_SHIFT = 'noShift';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationStatusAllowableValues()
    {
        return [
            self::AUTHENTICATION_STATUS_UNDEFINED,
            self::AUTHENTICATION_STATUS_AUTHENTICATED,
            self::AUTHENTICATION_STATUS_NOT_AUTHENTICATED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLiabilityShiftStatusAllowableValues()
    {
        return [
            self::LIABILITY_SHIFT_STATUS_UNDEFINED,
            self::LIABILITY_SHIFT_STATUS_SHIFT,
            self::LIABILITY_SHIFT_STATUS_NO_SHIFT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authentication_status'] = isset($data['authentication_status']) ? $data['authentication_status'] : null;
        $this->container['liability_shift_status'] = isset($data['liability_shift_status']) ? $data['liability_shift_status'] : null;
        $this->container['authentication_data'] = isset($data['authentication_data']) ? $data['authentication_data'] : null;
        $this->container['response_message'] = isset($data['response_message']) ? $data['response_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationStatusAllowableValues();
        if (!is_null($this->container['authentication_status']) && !in_array($this->container['authentication_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authentication_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLiabilityShiftStatusAllowableValues();
        if (!is_null($this->container['liability_shift_status']) && !in_array($this->container['liability_shift_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'liability_shift_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication_status
     *
     * @return string|null
     */
    public function getAuthenticationStatus()
    {
        return $this->container['authentication_status'];
    }

    /**
     * Sets authentication_status
     *
     * @param string|null $authentication_status The authentication status
     *
     * @return $this
     */
    public function setAuthenticationStatus($authentication_status)
    {
        $allowedValues = $this->getAuthenticationStatusAllowableValues();
        if (!is_null($authentication_status) && !in_array($authentication_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authentication_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_status'] = $authentication_status;

        return $this;
    }

    /**
     * Gets liability_shift_status
     *
     * @return string|null
     */
    public function getLiabilityShiftStatus()
    {
        return $this->container['liability_shift_status'];
    }

    /**
     * Sets liability_shift_status
     *
     * @param string|null $liability_shift_status The liability shift status
     *
     * @return $this
     */
    public function setLiabilityShiftStatus($liability_shift_status)
    {
        $allowedValues = $this->getLiabilityShiftStatusAllowableValues();
        if (!is_null($liability_shift_status) && !in_array($liability_shift_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'liability_shift_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['liability_shift_status'] = $liability_shift_status;

        return $this;
    }

    /**
     * Gets authentication_data
     *
     * @return map[string,string]|null
     */
    public function getAuthenticationData()
    {
        return $this->container['authentication_data'];
    }

    /**
     * Sets authentication_data
     *
     * @param map[string,string]|null $authentication_data All authentication data, as a dictionary of multiple key/value pairs.
     *
     * @return $this
     */
    public function setAuthenticationData($authentication_data)
    {
        $this->container['authentication_data'] = $authentication_data;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string|null
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string|null $response_message The global response message
     *
     * @return $this
     */
    public function setResponseMessage($response_message)
    {
        $this->container['response_message'] = $response_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


